const t=JSON.parse('{"key":"v-6ca23d5a","path":"/posts/2023-11-12-git-guide-team-strategy.html","title":"git 经验谈（三）：团队分支管理","lang":"en-US","frontmatter":{"title":"git 经验谈（三）：团队分支管理","date":"2023-11-12T00:00:00.000Z","tag":["git","项目管理","版本管理"],"description":"这篇文章是 git 系列第三篇，想介绍一下团队分支的管理。在我们的开发工作中，为了对流程进行更好的管理，更好地交付产品，应该充分地利用分支这个功能。这里我想介绍一下自己认为比较完备的、通用的 git 分支管理策略。开始之前，要先说明一下我认为的“通用”是针对什么样的开发流程的，它的特点如下： 有固定的迭代周期，一般是两周。 每个迭代结束后进行一次产品发布。迭代周期中不发布产品，除非是 hotfix / 紧急问题。 产品只有一个主版本。大多数基于 web 的产品都是这样的，不符合这个条件的产品一般是针对不同客户、国家等条件同时维护着多个正式版本。","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://rushingfly.github.io/zh/posts/2023-11-12-git-guide-team-strategy.html"}],["meta",{"property":"og:url","content":"https://rushingfly.github.io/posts/2023-11-12-git-guide-team-strategy.html"}],["meta",{"property":"og:site_name","content":"因纽特猎人Blog"}],["meta",{"property":"og:title","content":"git 经验谈（三）：团队分支管理"}],["meta",{"property":"og:description","content":"这篇文章是 git 系列第三篇，想介绍一下团队分支的管理。在我们的开发工作中，为了对流程进行更好的管理，更好地交付产品，应该充分地利用分支这个功能。这里我想介绍一下自己认为比较完备的、通用的 git 分支管理策略。开始之前，要先说明一下我认为的“通用”是针对什么样的开发流程的，它的特点如下： 有固定的迭代周期，一般是两周。 每个迭代结束后进行一次产品发布。迭代周期中不发布产品，除非是 hotfix / 紧急问题。 产品只有一个主版本。大多数基于 web 的产品都是这样的，不符合这个条件的产品一般是针对不同客户、国家等条件同时维护着多个正式版本。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-24T04:03:06.000Z"}],["meta",{"property":"article:author","content":"因纽特猎人"}],["meta",{"property":"article:tag","content":"git"}],["meta",{"property":"article:tag","content":"项目管理"}],["meta",{"property":"article:tag","content":"版本管理"}],["meta",{"property":"article:published_time","content":"2023-11-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-24T04:03:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"git 经验谈（三）：团队分支管理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-12T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-24T04:03:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"因纽特猎人\\",\\"url\\":\\"https://rushingfly.github.io\\"}]}"]]},"headers":[{"level":3,"title":"缺陷","slug":"缺陷","link":"#缺陷","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":3,"title":"参考的文章","slug":"参考的文章","link":"#参考的文章","children":[]}],"git":{"createdTime":1716523386000,"updatedTime":1716523386000,"contributors":[{"name":"Charles","email":"wangch2204@hotmail.com","commits":1}]},"readingTime":{"minutes":3.79,"words":1137},"filePathRelative":"posts/2023-11-12-git-guide-team-strategy.md","localizedDate":"November 12, 2023","excerpt":"<p>这篇文章是 git 系列第三篇，想介绍一下团队分支的管理。在我们的开发工作中，为了对流程进行更好的管理，更好地交付产品，应该充分地利用分支这个功能。这里我想介绍一下自己认为比较完备的、通用的 git 分支管理策略。开始之前，要先说明一下我认为的“通用”是针对什么样的开发流程的，它的特点如下：</p>\\n<ul>\\n<li>有固定的迭代周期，一般是两周。</li>\\n<li>每个迭代结束后进行一次产品发布。迭代周期中不发布产品，除非是 hotfix / 紧急问题。</li>\\n<li>产品只有一个主版本。大多数基于 web 的产品都是这样的，不符合这个条件的产品一般是针对不同客户、国家等条件同时维护着多个正式版本。</li>\\n</ul>","autoDesc":true}');export{t as data};
